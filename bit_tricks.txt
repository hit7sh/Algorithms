1)x & (x - 1):sets the last one bit of x to zero
power of two exactly when x & (x − 1) = 0.

2)x & -x:sets all the one bits to zero, except last one bit

3)x | (x - 1):inverts all the bits after the last one bit

4)(a^b) = (a|b)-(a&b) = (a+b-2*(a&b))

5)(a+b) = a^b + 2*(a&b)

6)   lowest set bit of N =n ^ ( n & (n-1));

7)    Turn off 1st set bit= n^(n&(-n));

8) clear all bits from MSB to ith bit  = n&((1<<i)-1);    

9) clear all bits from LSB= n&(~((1<<(i+1))-1))      

10) if a%m<0 then compute (a%m+m)%m    

11) int __builtin_ffs (int x) Returns one plus the index of the least significant 1-bit of x, 
or if x is zero, returns zero. 

12) int __builtin_clz (unsigned int x)  Returns the number of leading 0-bits in x, 
starting at the most significant bit position. If x is 0, the result is undefined.

13)  int __builtin_ctz (unsigned int x)    Returns the number of trailing 0-bits in x, 
starting at the least significant bit position. If x is 0, the result is undefined.

14)   __builtin_popcountl()

15)  __builtin_parityl()  Returns the parity of x, i.e. the number of 1-bits in x modulo 2.

16) __builtin_ctz(x) returns number of trailing 0-bits of x which starts from least significant bit 
position if x == 0, returns an undefined value.

 17)  for any two relatively prime positive integers m,nm,n, the greatest integer that cannot be written in the form am + bnam+bn for nonnegative integers a, ba,b is \ mn-m-n mn−m−n  
